Resources Used:
-https://www.virtualbox.org/wiki/Downloads
-https://www.microsoft.com/en-us/software-download/windows10
-https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/01-getting-started?view=powershell-7.4

Environments Used:
-Windows 10 in Virtualbox

Returned back to PowerShell ISE.

Collecting user input with Read-Host.

Read-Host: This cmdlet sets a variable to the read-host and wait for user input. Screenshot https://imgur.com/L8RwgD1

In the editor:
$FavColor = Read-Host -prompt "What is your favorite hair color?"

Output:
What is your favorite hair color?:

In the console: Typed 'Black' > Pressed Enter 
What is your favorite hair color?: Black
PS C:\Users\Queen> $FavColor

Output:
Black

Add options to the Read-Host. Screenshot https://imgur.com/Y4cFCgN

In the editor:
Write-Host "What is your favorite color?"
Write-Host "1. Red"
Write-Host "2. Brunette"
Write-Host "3. Black"
Write-Host "4. Purple"
$FavColor = Read-Host -prompt "What is your favorite hair color?"

Output:
What is your favorite color?
1. Red
2. Brunette
3. Black
4. Purple
What is your favorite hair color?: 

In the console: Typed '4' > Pressed Enter 
What is your favorite hair color?: 4
PS C:\Users\Queen> $FavColor

Output:
4


If... then... else conditionals: If/then/else statements run code blocks if a specified conditional test evaluates to true or false.

If statement
In the editor:
$Fishcaught = "30"
If ($Fishcaught -eq 30) {Write-Host "You've won a prize!"}

Output:
You've won a prize!

Screenshot: https://imgur.com/LJoH1OF

If conditions not met.

In the editor:
$Fishcaught = "29"
If ($Fishcaught -eq 30) {
        Write-Host "You've won a prize!"
    } Else {
        Write-Host "You get no prize."
    }

Output: 
You get no prize.

Screenshot: https://imgur.com/qKJWChf

If conditions are met.

In the editor:
$Fishcaught = "30"
If ($Fishcaught -eq 30) {
        Write-Host "You've won a prize!"
    } Else {
        Write-Host "You get no prize."
    }

Output: 
You've won a prize!

Screenshot: https://imgur.com/7Y4V3GP


Elseif conditionals: Elseif is used to specify an alternative condition to be evaluated if the initial "If" condition is false.

-ge is short for greater than or equal to
-le is short for less than or equal to

In the editor:
$TemperatureNum = 95
If($TemperatureNum -ge 1 -and $TemperatureNum -le 80) {
    Write-Host "The temperature is good."
} Elseif ($TemperatureNum -ge 81 -and $TemperatureNum -le 90) {
    Write-Host "The temperature is hot!"
} Elseif ($TemperatureNum -ge 91 -and $TemperatureNum -le 100) {
    Write-Host "The temperature is too hot to go outside!"
}

Output:
The temperature is too hot to go outside!

Screenshot: https://imgur.com/TNaDrsr


Switch Statements: This allows you to compare a value against multiple conditions. Use a single variable that you want to compare against multiple values.

break: You would use 'break' when we match and you don't want to keep evaluating. 

In the editor:
$MartialArts = "Taekwondo"
Switch($MartialArts) {
    "Taekwondo" {Write-Host "Originated from Korea"; break}
    "Brazilian jiu-jitsu" {Write-Host "Originated from Brazil"; break}
    "Tai chi" {Write-Host "Originated from China"; break}
}

Output:
Originated from Korea

Screenshot: https://imgur.com/0Dd8M0H


For Loops: For Loops are used in PowerShell scripting to iterate over a set of items or perform a specific action a certain number of times.

Example 1
For each iteration of this loop. For loop have three parameters. I have four elements: IT, Smile, The Nun, and Megan. Our counter starts from 0 (IT is the 0). The condition counter will be less than equal to 3 (Smile, The Nun, and Megan is 1,2,3). Stop the loop using $counter++. '++' is taking the value of counter and adding 1 to itself.    

Our counter: $counter =0
Our Condition: $counter -le 3
Stop the loop: $counter++
To loop through our counter: $HorrorMovies[$counter]

In the editor:
$HorrorMovies = @('IT', 'Smile', 'The Nun', 'Megan')
For ($counter =0; $counter -le 3;$counter++){
     Write-Host "I can not wait to watch" $HorrorMovies[$counter]
}

Output:
I can not wait to watch IT
I can not wait to watch Smile
I can not wait to watch The Nun
I can not wait to watch Megan

Screenshot: https://imgur.com/kcpYFGR

Example 2
If you change the $counter -le 3 to $counter -le 6. It will notice no extra elements are found, and it'll be blank.

In the editor:
$HorrorMovies = @('IT', 'Smile', 'The Nun', 'Megan')
For ($counter =0; $counter -le 4;$counter++){
     Write-Host "I can not wait to watch" $HorrorMovies[$counter]
}

Output:
I can not wait to watch IT
I can not wait to watch Smile
I can not wait to watch The Nun
I can not wait to watch Megan
I can not wait to watch
I can not wait to watch
I can not wait to watch

Screenshot: https://imgur.com/l4Xm96F

Check the length value of the variable $HorrorMovies.

In the console: 
$HorrorMovie.Length

Output:
4

Screenshot: https://imgur.com/jdjQD7p


Foreach Loops: Foreach Loops iterate over a collection of items, such as an array or a list, and perform a specific action on each item in the collection.

In the editor:
$HorrorMovies = @('IT', 'Smile', 'The Nun', 'Megan')
Foreach ($Movies in $HorrorMovies){
    Write-Host $Movies "is scary!"
}

Output:
IT is scary!
Smile is scary!
The Nun is scary!
Megan is scary!

Screenshot: https://imgur.com/Ts6MHTK


While Loops: While Loop evaluates a condition before each iteration of the loop, and if the condition is true, the code block is executed.

Start the counter to 0 (Batman is 0): $counter = 0
While counter not equal to 6: $counter -ne
Display the strings: Write-Host $DC[$counter]
Stop the loop: $counter++

In the editor:
$DC = @('Batman', 'Catwoman', 'Penguin', 'Poison Ivy', 'The Riddler', 'The Mad Hatter')
$counter = 0 
While($counter -ne 6){
    Write-Host $DC[$counter]
    $counter++;
}

Output:
Batman
Catwoman
Penguin
Poison Ivy
The Riddler
The Mad Hatter

Screenshot: https://imgur.com/gQP9UJC

You can also echo the variable array back and/or show the element length.

In the editor:
$DC = @('Batman', 'Catwoman', 'Penguin', 'Poison Ivy', 'The Riddler', 'The Mad Hatter')
$counter = 0 
While($counter -ne 6){
    Write-Host $DC[$counter] "is part of DC!"
    $DC[$counter].Length
    $counter++;
}

Output:
Batman is part of DC!
6
Catwoman is part of DC!
8
Penguin is part of DC!
7
Poison Ivy is part of DC!
10
The Riddler is part of DC!
11
The Mad Hatter is part of DC!
14

Screenshot: https://imgur.com/VfdsrT8

Infinite While loop: You can set it to equal to some condition that will never be met if you remove the $counter++.

Removed ($counter++;) and changed the (-ne 6) to -ne -1

In the editor:
$DC = @('Batman', 'Catwoman', 'Penguin', 'Poison Ivy', 'The Riddler', 'The Mad Hatter')
$counter = 0 
While($counter -ne -1){
    Write-Host $DC[$counter] "is part of DC!"
    $DC[$counter].Length
}

Output: It'll repeat it until you press CTRL + C
Batman is part of DC!
6
Batman is part of DC!
6

Screenshot: https://imgur.com/qNlBRDC


Do While Loops: The condition is evaluated after the script has run.

In the editor:
$DC = @('Batman', 'Catwoman', 'Penguin', 'Poison Ivy', 'The Riddler', 'The Mad Hatter')
$counter = 0
Do {
   Write-Host $DC[$counter] "is part of DC!" 
   $counter++
} While ($counter -ne 6)

Output:
Batman is part of DC!
Catwoman is part of DC!
Penguin is part of DC!
Poison Ivy is part of DC!
The Riddler is part of DC!
The Mad Hatter is part of DC!

Screenshot: https://imgur.com/ovNcW9g


Defining Custom Functions

Defining custom functions involves creating user-defined functions that perform specific tasks or operations within the PowerShell scripting environment. These functions can be tailored to meet the unique requirements of a PowerShell script or automation task.

In the editor:
function Test-Google {
    ping google.com
}
Test-Google

Ping: Ping is a network utility tool used to test the reachability of a host on an Internet Protocol (IP) network. It sends a series of ICMP (Internet Control Message Protocol) echo request packets to the target host and waits for a response.

Screenshot: https://imgur.com/6LA3Zo5

You can test it in the console since it's defined in the environment. Screenshot: https://imgur.com/Vc06CRr

In the console:
Test-Google

You can defined the pings.

In the editor:
function Test-Google {
    param(
        $PingCount
    )
    Test-Connection google.com -Count $PingCount
}
Test-Google -PingCount 6

Screenshot: https://imgur.com/Loog9o1

Test-Connection: This is a cmdlet that test network connectivity between the local computer and a remote host. It sends ICMP echo request packets to the target host and waits for a response. It's similar to Ping.

Param: Is used to define parameters in a function or script. Parameters allow you to pass values or data into a script or function. 

$PingCount: This is a variable that can be used to store the number of ping packets to send when testing network connectivity using the Test-Connection cmdlet.


Defining Custom Advanced Functions

Set a cmdlet binding without using -PingCount

CmdletBinding allows you to define advanced parameters and attributes for a script or function, turning it into a cmdlet. After CmdletBinding, you can use parameter validation, pipeline support, and common parameters like Verbose, Debug, and ErrorAction

Int32: Is a 32-bit signed data type. Integers are whole numbers without any decimal points.

In the editor:
Function Test-Google {
         [CmdletBinding()] #turns into adv. function
         Param(
                 [Parameter(Mandatory)]
                 [int32] $PingCount
         )
            Test-Connection google.com $PingCount
}
Test-Google 

Output:
Cmdlet Test-Google at command pipeline position 1 
Supply values for the following parameters:
PingCount: 

Added 6 to ‘PingCount:’ 

Screenshot:



