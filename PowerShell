Resources Used:
-https://www.virtualbox.org/wiki/Downloads
-https://www.microsoft.com/en-us/software-download/windows10
-https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/01-getting-started?view=powershell-7.4

Environments Used:
-Windows 10 in Virtualbox

Opened Windows 10 virtual machine through VirtualBox. Start > Typed 'PowerShell' > Run as Administrator > Clicked 'Yes' . Screenshots https://imgur.com/v4IAbob, https://imgur.com/Y0ZPTf4, https://imgur.com/iFcXNP9

The version of my PowerShell.

In the terminal:
$PSVersionTable.PSVersion

It shows I'm on PowerShell version 5.
Screenshot: https://imgur.com/CKHRWqp


Get-Help *: This will display help information for all the cmdlets. Another way to get information is to use cmdlet name instead of '*'.

Example 1
In the terminal:
Get-Help *

Screenshots: https://imgur.com/hMJeOJC, https://imgur.com/qFMRzFd

Example 2
In the terminal:
Get-Help Get-Host

Screenshot: https://imgur.com/mLv7hwU


Checking and setting up Execution Policy to run scripts

To see your current Execution Policy.

In the terminal:
Get-ExecutionPolicy

Output: 
Unrestricted

My ExecutionPolicy show 'Unrestricted' and is a default execution policy for non-Windows computers and cannot be changed. Unsigned scripts can be run but, you have to make sure it's from a trusted source.

Screenshot: https://imgur.com/vyDyMcF

To set your Execution Policy. I'm going to set it to RemoteSigned. Remotesigned is a default execution policy for Windows server computers. You can run scripts. 

To set your Execution Policy.

In the terminal:
Set-ExecutionPolicy RemoteSigned
Typed 'Y' and pressed Enter
Get-ExecutionPolicy

Output: 
RemoteSigned

Screenshot: https://imgur.com/9dB7lWc


PowerShell ISE: ISE is short for Intergrated Scripting Environment. It's a host application editor for Windows PowerShell and you can run scripts. Also run commands.

Created a folder named PowerShell Scripts. Screenshot https://imgur.com/jVxUhv6
In Start, typed and selected 'PowerShell ISE'. Screenshot https://imgur.com/S9SBs1H
Clicked the paper Icon at the type right to start a new script. Screenshot https://imgur.com/ScfhnBa

Writing a script using the Write-Host cmdlet

Write-Host: This cmdlet will output the text to the console. 

In the editor:
Write-Host "Where's Waldo"

Clicked the green play button to run the script.

Output: 
Where's Waldo

Screenshot: https://imgur.com/14TPE4Z


To save a script. File > Save as > Selected the 'Powershell Scripts' folder > Save > Viewed 'Powershell Scripts' folder

Screenshots: https://imgur.com/n5DNY7H, https://imgur.com/rfrJwD6, https://imgur.com/uGoOBiK


Powershell Comments (#): A comment is a line a code that won't be executed. 

In the editor:
#I found Waldo!

Screenshot: https://imgur.com/UjvGHma

You can also disabled code without deleting it with comments.

In the editor:
#I found Waldo!
#Write-Host "Where's Waldo"

Screenshot: https://imgur.com/DyOaeml


Cmdlets: Cmdlets performs a specific task in the PowerShell environment. Cmdlets are designed to be used in a pipeline, allowing users to chain multiple cmdlets together to perform complex operations. It provides a powerful way to automate tasks and manage system configurations. Cmdlets uses a verb-noun (Ex. Write-Host) naming convention.

Example 1: Write-Host
Example 2: Get-ExecutionPolicy
Example 3: Set-ExecutionPolicy

Get-Command -commandTyper Cmdlet: In PowerShell(Not ISE), this will list all the cmdlets you can use and what module they are from.

Screenshot: https://imgur.com/FYLim7t


Parameters: You can change the script's behavior by using parameters without changing the code.

In the editor:
Write-Host "Where's Waldo" -NoNewline
Write-Host "I can not find Waldo"

-NoNewline: This command will not run the script in two lines in the console. It will run in one line.

Without parameter screenshot: https://imgur.com/ZTxtZVA
With parameter screenshot: https://imgur.com/xlAqWjV


Pipeline (piping - or combining - commands). Piping commands will let you combine cmdlets into pipelines. Pipelines uses '|'.

Example:
Command-1 | Command-2 

In the terminal:
"Spring is coming!" | Out-File Seasons.txt
ls
cat .\Seaons.txt

Output: Spring is coming!

Screenshot: https://imgur.com/3nzM6a0


Variables: PowerShell Variables is a storage location used to hold data or values within a PowerShell script or command. Variables in PowerShell are denoted by a dollar sign ($) followed by the variable name.

In the terminal:
$FavMovie = "Black Widow"

To show the value of your variable.

In the terminal:
$FavMovie

Output: 
Black Widow

Screenshot: https://imgur.com/btUM85f

Pipe a variable.

In the terminal:
$FavMovie | Out-File FavMovie.txt
ls
cat '\FavMovie.txt

Screenshot: https://imgur.com/a1iEvl0


PowerShell Variable/Data Types

1. String: Used to store text data.
2. Integer: Used to store whole numbers.
3. Double: Used to store floating-point numbers.
4. Boolean: Used to store true or false values.
5. Array: Used to store a collection of values.
6. Hashtable: Used to store key-value pairs.
7. Object: Used to store complex data structures.
8. Null: Represents a variable with no value assigned.

Determine the type of variable.

Example 1
In the terminal:
$FavMovie.GetType()

Output: 
The output should show it's a string.

Screenshot: https://imgur.com/DYTjtBm

Example 2
In the terminal:
$FavMovie = 5
$FavMovie.GetType()

Output: 
The output should show it's a integer.

Screenshot: https://imgur.com/OsajRXn

Example 3
In the terminal:
$FavMovie = 5.9
$FavMovie.GetType()

Output: 
The output should show it's a double floating point.

Screenshot: https://imgur.com/m4q2Clk

Example 4
In the terminal:
$FavMovie = $true
$FavMovie.GetType()

Output: 
The output should show it's a boolean.

Screenshot: https://imgur.com/yQFumYJ

Example 5
In the terminal:
$FavMovie = "Black Widow"
$FavMovie.GetType()

Output: 
The output should show it's a string.

Screenshot: https://imgur.com/Acggydm


Arithmetic with variables.

Example 1
In the terminal:
$x = 9
$y = 6
$x + $y

Output: 
15

Screenshot: https://imgur.com/VlGTR8V

Example 2
In the terminal:
$x * $y

Output: 
54

Screenshot: https://imgur.com/m57lGyx

Example 3
In the terminal:
$x - $y

Output: 
3

Screenshot: https://imgur.com/ZvsNsry

Example 4
In the terminal:
$x / $y

Output: 
1.5

Screenshot: https://imgur.com/xCyHajy


Objects: Everything in PowerShell is an object. Objects are made up of properties and methods.
Properties: Variables that describe the object (characteristics).
Methods: Functions that define how to use the object (actions).

Object properties

In the terminal:
$FavMovie.Length

Output:
11

Screenshot: https://imgur.com/GSTxQvl

Get all properties of an object with Select-Object.

In the terminal:
$FavMovie | Select-Object -Property *

Output:
Length 11

Screenshot: https://imgur.com/hJ6TCN3

Use Get-Member to get all of the different possible methods of an object.

In the terminal:
Get-Member -InputObject $FavMovie

Screenshot: https://imgur.com/5FzdvT5


Arrays: Arrays are used to store a collection of values.

In the terminal:
$Marvel = @('Thor', 'Hulk', 'Scarlet Witch', 'Doctor Strange')
$Marvel 

Output:
Thor
Hulk
Scarlet Witch
Doctor Strange

Screenshot: https://imgur.com/e1QA6VE

Using the GetType method

In the terminal:
$Marvel.GetType()

Output:
It'll show it's an object with the basetype is array.

Screenshot: https://imgur.com/n9gQmw7

Retrieve values from specific values. The first element of an array always start with the number 0. Screenshot https://imgur.com/jJPoiBI

Example 1
In the terminal:
$Marvel[0]

Output:
Thor

Example 2
In the terminal:
$Marvel[1]

Output:
Hulk

Example 3
In the terminal:
$Marvel[2]

Output:
Scarlet Witch

Know the length of the specific variable array. Screenshot https://imgur.com/yLNDwtr

Example 1
In the terminal:
$Marvel[0].Length

Output:
4

Example 2
In the terminal:
$Marvel[1].Length

Output:
4

Example 3
In the terminal:
$Marvel[2].Length

Output:
13

Add extra to the variable array. Screenshot https://imgur.com/ygQpeaC

In the terminal:
$Marvel += "Deadpool"
$Marvel

Output:
Thor
Hulk
Scarlet Witch
Doctor Strange
Deadpool


Hashtables: Hastables are used to store key-value pairs. Screenshots https://imgur.com/XT0piKq, https://imgur.com/qwssAGC

Example 1
In the terminal:
$Shopping = @{key1 = "item1"; key2 = item2"}
$Shopping

Output:
key1       item1
key2       item2

Example 2
In the terminal:
$Weather = @{Hot = "Summer"; Cold = "Winter"; Rain = "Spring"}
$Weather

Output:
Rain      Spring
Hot       Summer
Cold      Winter

Add to an Hashtable. Screenshot https://imgur.com/IEoItQF

In the terminal:
$Weather.Add("Cool", "Fall")
$Weather

Output:
Cool      Fall
Rain      Spring
Hot       Summer
Cold      Winter

Edit a key-value pair from the hashtable. Screenshot https://imgur.com/p9HXQ0a

In the terminal:
$Weather.Set_Item("Hot", "July")
$Weather

Output:
Cool      Fall
Rain      Spring
Hot       July
Cold      Winter

Retrieve a specific key-value pair. Screenshot https://imgur.com/4Db38uH

Example 1
In the terminal:
$Weather."Cool"

Output:
Fall

Eaxmple 2
In the terminal:
$Weather["Cool"]

Output:
Fall

Remove a specific key-value pair. Screenshot https://imgur.com/HM197jp

In the terminal:

$Weather.Remove("Hot")
$Weather

Output:
Cool      Fall
Rain      Spring
Cold      Winter







