Resources Used:
-https://www.virtualbox.org/wiki/Downloads
-https://www.microsoft.com/en-us/software-download/windows10
-https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/01-getting-started?view=powershell-7.4

Environments Used:
-Windows 10 in Virtualbox

PowerShell automation uses PowerShell scripts to automate tasks and processes on a Windows operating system. You can automate administrative tasks, manage system configurations, and perform various other tasks through the command-line interface.

Opened PowerShell ISE.

Create a scheduled task.

In the editor:
$trigger = New-ScheduledTaskTrigger -At 4:21pm -Daily
$action = New-ScheduledTaskAction -Execute “powershell.exe” -Argument “-File ‘C:\\Scripts\\TestGoogle.ps1’”
$settings = New-ScheduledTaskSettingsSet
Register-ScheduledTask -Action $action -Trigger $trigger -TaskName “Test Google” -Description “Tests connection with google.com” -Settings $settings

$trigger = New-ScheduledTaskTrigger -At 3pm -Daily`: This line creates a new scheduled task trigger that will run the task at 3 PM daily.

$action = New-ScheduledTaskAction -Execute “powershell.exe” -Argument “-File ‘C:\\Scripts\\TestGoogle.ps1’”`: This line creates a new scheduled task action that specifies the execution of a PowerShell script located at "C:\Scripts\TestGoogle.ps1".

$settings = New-ScheduledSettingsSet: This line creates a new scheduled task settings set.

Register-ScheduleTask -Action $action -trigger -TaskName “Test Google” -Description “Tests connection with google.com” -Settings $settings`: This line registers the scheduled task with the specified action, trigger, task name ("Test Google"), description ("Tests connection with google.com"), and settings.

This scheduled task named "Test Google" will run a PowerShell script daily at 3PM to test the connection with google.com.

Screenshots: https://imgur.com/f5SVROa, https://imgur.com/7vjBuxl

View in Task Scheduler
Start > Typed and Opened Task Scheduler > Go to 'Task Scheduler Library' > Scrolled down to 'Test Google'. It shows the task I created.

Screenshots: https://imgur.com/mMWcSfE, General https://imgur.com/GJvlkT1, Triggers https://imgur.com/KlG9qRn, Actions https://imgur.com/YvmFfEE


In PowerShell terminal.

View a scheduled task.

Example 1
In the terminal:
Get-ScheduledTask

Screenshot: https://imgur.com/undefined

Example 2
In the terminal:
Get-ScheduledTask -TaskName "Test Google"

Screenshot: https://imgur.com/cvlVwzE

Example 3
In the terminal:
Get-ScheduledTask -TaskName "Test Google" | Get-ScheduledTaskInfo

Screenshot: https://imgur.com/RQocbeu


Remove a scheduled task.

In the terminal:
Unregister-ScheduledTask -TaskName "Test Google" -Confirm:$false

If I type 'Get-ScheduledTask -TakeName "Test Google"', it will show an error of task does not exist.

Screenshot: https://imgur.com/kIZfLpc


Create a scheduled Jobs

Run as Administrator In PowerShell ISE.

In the editor:
$Trigger = New-JobTrigger -Daily -At 8:10pm
$Scriptblock = { C:\Scripts\TestGoogle.ps1 }
Register-ScheduledJob -Name "TestGoogle Job" -ScriptBlock $Scriptblock -Trigger $Trigger

Screenshot: https://imgur.com/SMCJ9eg


View scheduled jobs.

Example 1
In the console:
Get-ScheduledJob

Screenshot: https://imgur.com/zYfEcB5

Example 2
Use filter to find a scheduled job.
In the console:
Get-ScheduledJob -Name "TestGoogle*"

Screenshot: https://imgur.com/lc3lbkV

Example 3
View details of a scheduled job.
In the console:
Get-ScheduledJob -Name "TestGoogle*" | Get-JobTrigger

Screenshot: https://imgur.com/m6GyE97

Example 4
View specific triggers of a scheduled job.
In the console:
Get-ScheduledJob -Name "TestGoogle*" | Select Name,State

Screenshot: https://imgur.com/5RLcDbq


Remove a scheduled job.

In the console:
Unregister-ScheduledJob -Name “TestGoogle Job”
Get-ScheduledJob

It will show there’s no scheduled jobs.

Screenshot: https://imgur.com/kfh1D0Q


Build graphical user interfaces (GUI) with PowerShell scripts using Windows Forms.

I installed Visual Studio 2022 with the free community edition. I made sure to download .net Desktop Development in Visual Studio, as the Windows Forms are located there.

Screenshots: https://imgur.com/xiVeWEM, https://imgur.com/AHwJvpk

Step 1. Opened Visual Studio. 
Step 2. Select 'Create a new project'. 
Step 3. Searched for 'forms' in the search function.
Step 4. Select 'Windows Forms App (.NET Framework).
Step 5. Configured my new project. Named the project 'PowerShellGUI', and selected a location.
Step 6. Clicked Create

Screenshot:

Once the form appeared, opened the 'Toolbox' on the left side. In the form properties on the right, located the form name (called Form1). Changed the name to 'PowerShell'. Srcolled down to 'Design' section and changed the 'Form1 name' to 'PowerShell'.

Step 1: In the Toolbox, selected/dragged 'TextBox' in the 'Common Controls' section to the form.
Step 2: Selected/dragged 'Label' in the 'Common Controls' section to the form above the textbox.
Step 3: Selected/dragged 'Button' in the 'Common Controls' section to the form right side of the textbox.
Step 4: Selected/dragged 'TextBox' in the 'Common Controls' section to the form under the first textbox.

Screenshots:

Customize
Step 1: Clicked the label in the form > Renamed the label in the properties to 'ComputerName'. Renamed the 'Design' label in the properties to 'Label1'.

Step 2: Clicked the first textbox in the form > Renamed the 'Design' textbox in the properties to 'ATL-PC-BOX'. Adjusted the textbox font size to 14 in the properties > Adjusted the textbox and button in the form to be neater.

Step 3: Clicked the button in the form > Renamed the 'Text' button in the properties to 'Run'. Adjusted the button font size to 14 in the properties 

Step 4: Clicked the second textbox in the form > Renamed the 'Design' textbox in the properties to 'Output'. Changed the 'Multiline' to 'True' to make adust the textbox to be bigger, as it's the output.

Step 5: Go to 'File' > Save Form1.cs

Screenshots: 

Opened PowerShell and installed PowerShell module from https://github.com/LaurentDardenne/ConvertForm.

In the terminal:
$PSGalleryPublishUri = 'https://www.myget.org/F/ottomatt/api/v2/package'
$PSGallerySourceUri = 'https://www.myget.org/F/ottomatt/api/v2'

Register-PSRepository -Name OttoMatt -SourceLocation $PSGallerySourceUri -PublishLocation $PSGalleryPublishUri #-InstallationPolicy Trusted
Install-Module ConvertForm -Repository OttoMatt

Screenshot:

Show a list of modules available.
In the terminal:
get-module -ListAvailable 

It should show the script I downloaded.

Screenshot: 

Check execution policy
In the terminal:
Get-ExecutionPolicy

Output:
RemoteSigned

It should show which policy I'm on, which is 'RemotedSigned'. I'm able to run scripts without restriction.

Screenshot:

Find the designer.cs path is located.

In the Visual Studio > 'Solution Explorer' on the right > Under 'Form1.cs, clicked '






